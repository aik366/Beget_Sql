from aiogram import Bot, F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from config import MY_ID
import os

import app.datebase.requests_admin as ad

router_admin = Router()


class Reg(StatesGroup):
    del_id = State()
    text_1 = State()
    del_user = State()


class PhotoForm(StatesGroup):
    waiting_for_photo = State()  # –®–∞–≥ 1: –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ
    waiting_for_caption = State()  # –®–∞–≥ 2: –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏


@router_admin.message(F.text == '–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
async def delete_user(message: Message, state: FSMContext):
    await state.set_state(Reg.del_user)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –§.–ò.\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω')


@router_admin.message(Reg.del_user)
async def delete_user_reg(message: Message, state: FSMContext):
    await state.update_data(del_user=message.text)
    data_state = await state.get_data()
    data_list = data_state['del_user'].split()
    await ad.admin_delete(data_list[0], data_list[1])
    await message.answer('–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')
    await state.clear()


# –°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞
@router_admin.message(F.text == "–ö–∞—Ä—Ç–∏–Ω–∫–∞", F.from_user.id == MY_ID)
async def start_photo_upload(message: Message, state: FSMContext):
    await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å")
    await state.set_state(PhotoForm.waiting_for_photo)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@router_admin.message(PhotoForm.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    await state.update_data(photo_id=photo.file_id)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –ø–æ–¥–ø–∏—Å–∏
    await state.set_state(PhotoForm.waiting_for_caption)
    await message.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∏
@router_admin.message(PhotoForm.waiting_for_caption, F.text)
async def process_caption(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(caption=message.text)
    full_data = await state.get_data()
    for tg_id, name, data in await ad.db_select_id():
        try:
            await bot.send_photo(int(tg_id), full_data['photo_id'],
                                 caption=f"–ü—Ä–∏–≤–µ—Ç {name}!\n{full_data['caption']}\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è!!!")
        except Exception as e:
            await bot.send_message(MY_ID, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}')
    await state.clear()


@router_admin.message(F.text == "–û–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def cmd_admin_ad(message: Message, state: FSMContext):
    await state.set_state(Reg.text_1)
    await message.answer("–ü–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")


@router_admin.message(Reg.text_1)
async def reg_admin_text_1(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(text_1=message.text)
    data_state = await state.get_data()
    for tg_id, name, data in await ad.db_select_id():
        try:
            await bot.send_message(int(tg_id), f"–ü—Ä–∏–≤–µ—Ç {name}!\n{data_state['text_1']}\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è!!!")
        except Exception as e:
            await bot.send_message(MY_ID, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}')
    await state.clear()


@router_admin.message(F.photo, F.from_user.id == MY_ID)
async def cmd_admin_photo(message: Message, bot: Bot):
    file_name = f"images/{len(os.listdir('images')) + 1}.jpg"
    await bot.download(message.photo[-1], destination=file_name)
    await message.answer('–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')


@router_admin.message(F.text == '–î–∞–Ω–Ω—ã–µ –ø–æ ID')
async def viev_id(message: Message, state: FSMContext):
    data_txt = ""
    for tg_id, name, data in await ad.db_select_id():
        data_txt += f"{tg_id} {name} {data}\n"
    await message.answer(f"{data_txt}")
    await state.clear()


@router_admin.message(F.text == 'üóëÔ∏è–£–¥–∞–ª–∏—Ç—å –ø–æ ID')
async def delete_id(message: Message, state: FSMContext):
    await state.set_state(Reg.del_id)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID')


@router_admin.message(Reg.del_id)
async def delete_id_reg(message: Message, state: FSMContext):
    await state.update_data(del_id=message.text)
    data_state = await state.get_data()
    await ad.db_delete_id(data_state['del_id'])
    await message.answer('–î–∞–Ω–Ω—ã–µ –ø–æ ID —É–¥–∞–ª–µ–Ω—ã')
    await state.clear()


@router_admin.message()
async def echo(message: Message):
    await message.reply('–æ—à–∏–±–∫–∞!')
