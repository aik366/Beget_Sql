from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command, Filter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from config import MY_ID
from random import choice
from datetime import datetime
import app.func as fn
import os

import app.databases as db
import app.keyboards as kb

router = Router()


class Form(StatesGroup):
    first_name = State()
    last_name = State()
    birthday = State()
    del_user = State()
    del_number = State()
    del_len_list = State()
    edit_number = State()
    edit_len_list = State()
    edit_surname = State()
    edit_name = State()
    edit_data = State()
    surname_edit = State()
    name_edit = State()
    data_edit = State()


def validate_name(name):
    return len(name) >= 2 and name.isalpha()


@router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot, state: FSMContext):
    await db.start_db(message.from_user.id, message.from_user.full_name)
    if message.from_user.id != MY_ID:
        await bot.send_message(MY_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º')
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç! {message.from_user.full_name}', reply_markup=kb.add_user_data)
    await state.clear()


@router.message(Command('help'))
async def cmd_help(message: Message, state: FSMContext):
    await message.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏')
    await state.clear()


@router.message(Command('admin'))
async def cmd_admin(message: Message, state: FSMContext):
    if message.from_user.id != MY_ID:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        return
    await message.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb.admin)
    await state.clear()


@router.message(F.text == 'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def start_menu(message: Message, state: FSMContext):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.add_user_data)
    await state.clear()


@router.message(F.text == '‚ùå–û—Ç–º–µ–Ω–∞')
async def add_cencel(message: Message, state: FSMContext):
    await message.answer("–î–µ–∏ÃÜ—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()


@router.message(F.text == 'üëÅÔ∏è–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö')
async def add_user_viev(message: Message, state: FSMContext):
    await message.answer(f"{await db.db_select()}", reply_markup=kb.view_birthday)
    await state.clear()


@router.callback_query(F.data == 'birthday')
async def add_user_viev_data(call: CallbackQuery, state: FSMContext):
    await call.message.answer(f"{await db.select_data()}", reply_markup=kb.add_user_data)
    await state.clear()
    await call.answer()


@router.message(F.text == '‚ú®–ü–æ–∂–µ–ª–∞–Ω–∏—è')
async def open_wishes(message: Message):
    with open(f"files/wishes.txt", "r", encoding="utf-8") as f:
        wishes_txt = choice(f.read().split('\n'))
        await message.answer(f"{wishes_txt}")


@router.message(F.text == 'ü•Ç–¢–æ—Å—Ç')
async def open_toasts(message: Message):
    with open(f"files/toasts.txt", "r", encoding="utf-8") as f:
        toasts_txt = choice(f.read().split('\n'))
        await message.answer(f"{toasts_txt}")


@router.message(F.text == 'üéÅ–û—Ç–∫—Ä—ã—Ç–∫–∏')
async def file_open_images(message: Message, state: FSMContext):
    img = FSInputFile(f'images/{choice(os.listdir("images"))}')
    await message.answer_photo(img)
    await state.clear()


@router.message(F.text == 'üóëÔ∏è–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
async def delete_user(message: Message, state: FSMContext):
    await state.set_state(Form.del_number)
    list_id = await db.delete_select(message.from_user.id)
    await state.update_data(del_len_list=len(list_id.split('\n')) - 1)
    if list_id:
        await message.answer(f"{list_id}\n–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=kb.add_user_data)
        await state.clear()


@router.message(F.text == '‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
async def view_user(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Form.edit_number)
    list_id = await db.delete_select(message.from_user.id)
    await state.update_data(edit_len_list=len(list_id.split('\n')) - 1)
    if list_id:
        await message.answer(f"{list_id}\n–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä\n–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=kb.add_user_data)
        await state.clear()


@router.message(F.text == 'üÜï–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
async def add_data(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Form.first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):", reply_markup=kb.cancel_one)


@router.message(F.text == 'üòÇ–ê–Ω–µ–∫–¥–æ—Ç –¥–Ω—è')
async def open_wishes(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"{await fn.anekdot_random()}")


@router.message(F.text == 'üí≤–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
async def open_wishes(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"{await fn.currency()}")


@router.message(F.text == 'üå¶Ô∏è–ü–æ–≥–æ–¥–∞')
async def open_wishes(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"{await fn.get_weather_forecast()}")


# @router.message(F.text == 'üìù–ó–∞–º–µ—Ç–∫–∏')
# async def note_text(message: Message, state: FSMContext):
#     await state.clear()
#     await message.answer("–¢—ã –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫.\n–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=kb.note_list)
#
#
# @router.message(F.text == 'üìù–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
# async def note_text(message: Message, state: FSMContext):
#     await state.clear()
#     await state.set_state(Notes.fsm_note_name)
#     await message.answer("–ü–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ üëá", reply_markup=kb.note_list)
#
#
# @router.message(F.text == 'üìã–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏')
# async def my_note_text(message: Message, state: FSMContext):
#     await state.clear()
#     await state.set_state(Notes.note_number)
#     notes_dict = await db.select_note(message.from_user.id)
#     if notes_dict:
#         await state.update_data(note_list=notes_dict)
#         for key in notes_dict:
#             await message.answer(f"{key}. {notes_dict[key][0]}")
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –î–ª—è\n–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
#                              reply_markup=kb.note_list)
#     else:
#         await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫",
#                              reply_markup=kb.note_list)
#
#
# @router.message(Notes.note_number)
# async def number_note(message: Message, state: FSMContext):
#     try:
#         await state.update_data(note_namber=message.text)
#         await state.set_state(Notes.note_all)
#         data_state = await state.get_data()
#         num = int(data_state['note_namber'])
#         await message.answer(f"{num}. {data_state['note_list'][num][0]}", reply_markup=kb.edit_note)
#     except Exception as e:
#         await message.answer("–ü–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç!", reply_markup=kb.note_list)
#
#
# @router.callback_query(Notes.note_all, F.data == 'note_view')
# async def view_note(call: CallbackQuery, state: FSMContext):
#     data_state = await state.get_data()
#     num = int(data_state['note_namber'])
#     await call.message.answer(f"{data_state['note_list'][num][1]}", reply_markup=kb.note_list)
#     await call.answer()
#
#
# @router.callback_query(Notes.note_all, F.data == 'note_edit')
# async def edit_note(call: CallbackQuery, state: FSMContext):
#     await state.update_data(note_all=call.data)
#     await state.set_state(Notes.note_edit)
#     await call.message.answer("–ò–º—è –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏?", reply_markup=kb.note_edit)
#     await call.answer()
#
#
# @router.callback_query(Notes.note_edit, F.data == 'edit_name')
# async def edit_note_name(call: CallbackQuery, state: FSMContext):
#     await state.update_data(note_edit=call.data)
#     await state.set_state(Notes.name_text)
#     await call.message.answer("–ü–∏—à–∏—Ç–µ –ò–º—è –∑–∞–º–µ—Ç–∫–∏ üëá", reply_markup=kb.note_list)
#     await call.answer()
#
#
# @router.callback_query(Notes.note_edit, F.data == 'edit_text')
# async def edit_note_text(call: CallbackQuery, state: FSMContext):
#     await state.update_data(note_edit=call.data)
#     await state.set_state(Notes.name_text)
#     await call.message.answer("–ü–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ üëá", reply_markup=kb.note_list)
#     await call.answer()
#
#
# @router.message(Notes.name_text)
# async def save_note(message: Message, state: FSMContext):
#     await state.update_data(name_text=message.text)
#     data_state = await state.get_data()
#     num = int(data_state['note_namber'])
#     note_name, note_text = data_state['note_list'][num]
#     if data_state['note_edit'] == 'edit_name':
#         await db.update_note_name(message.from_user.id, data_state['name_text'], note_name, note_text)
#         await message.answer("–ò–º—è –∑–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", reply_markup=kb.note_list)
#     else:
#         await db.update_note_text(message.from_user.id, data_state['name_text'], note_name, note_text)
#         await message.answer("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", reply_markup=kb.note_list)
#     await state.clear()
#
#
# @router.callback_query(Notes.note_all, F.data == 'note_delete')
# async def delete_note(call: CallbackQuery, state: FSMContext):
#     await state.update_data(note_all=call.data)
#     await state.set_state(Notes.note_delete)
#     data_state = await state.get_data()
#     num = int(data_state['note_namber'])
#     await call.message.answer(f"{num}. {data_state['note_list'][num][0]}", reply_markup=kb.note_delete)
#     await call.answer()
#
#
# @router.callback_query(Notes.note_delete, F.data == 'delete_note')
# async def delete_note_es(call: CallbackQuery, state: FSMContext):
#     await state.update_data(note_delete=call.data)
#     data_state = await state.get_data()
#     num = int(data_state['note_namber'])
#     note_name, note_text = data_state['note_list'][num]
#     await db.note_delete(call.from_user.id, note_name, note_text)
#     await call.message.answer("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!!!", reply_markup=kb.note_list)
#     await call.answer()
#     await state.clear()
#
#
# @router.message(Notes.fsm_note_name)
# async def text_note(message: Message, state: FSMContext):
#     await state.update_data(fsm_note_name=message.text)
#     await state.set_state(Notes.fsm_note_text)
#     await message.answer("–ü–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ üëá", reply_markup=kb.note_list)
#
#
# @router.message(Notes.fsm_note_text)
# async def save_note(message: Message, state: FSMContext):
#     await state.update_data(fsm_note_text=message.text)
#     data_state = await state.get_data()
#     await db.add_note(message.from_user.id, data_state['fsm_note_name'], data_state['fsm_note_text'])
#     await message.answer("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", reply_markup=kb.note_list)


@router.message(Form.del_number)
async def delete_user_reg(message: Message, state: FSMContext):
    await state.update_data(del_number=message.text)
    data_state = await state.get_data()
    if not message.text.isdigit() or int(message.text) > data_state['del_len_list'] or int(message.text) < 1:
        return await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ\n–ü–æ–ø—Ä–æ–±—É–∏ÃÜ—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=kb.add_user_data)
    data_state = await state.get_data()
    surname, name, data = await db.edit_to_number(message.from_user.id, int(data_state['del_number']))
    await state.update_data(edit_surname=surname, edit_name=name, edit_data=data)
    await message.answer(f'{surname} {name} {data}', reply_markup=kb.delete)


@router.callback_query(F.data == 'delete')
async def delete_user(call: CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    await db.delete_to_number(call.from_user.id, int(data_state['del_number']))
    await call.message.answer('–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã', reply_markup=kb.note_list)
    await state.clear()
    await call.answer()


@router.message(Form.edit_number)
async def view_user_reg(message: Message, state: FSMContext):
    await state.update_data(edit_number=message.text)
    data_state = await state.get_data()
    if not message.text.isdigit() or int(message.text) > data_state['edit_len_list'] or int(message.text) < 1:
        return await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ\n–ü–æ–ø—Ä–æ–±—É–∏ÃÜ—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=kb.note_list)
    data_state = await state.get_data()
    surname, name, data = await db.edit_to_number(message.from_user.id, int(data_state['edit_number']))
    await state.update_data(edit_surname=surname, edit_name=name, edit_data=data)
    await message.answer(f'{surname} {name} {data}', reply_markup=kb.edit)


@router.callback_query(F.data == 'surname')
async def edit_user(call: CallbackQuery, state: FSMContext):
    await state.set_state(Form.surname_edit)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):")
    await call.answer()


@router.message(Form.surname_edit)
async def edit_user_reg(message: Message, state: FSMContext):
    if not validate_name(message.text):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–º–∏–Ω. 2 —Å–∏–º–≤–æ–ª–∞).",
                                    reply_markup=kb.add_user_data)
    await state.update_data(surname_edit=message.text.capitalize())
    data_state = await state.get_data()
    await db.update_surname(data_state['surname_edit'], data_state['edit_surname'], data_state['edit_name'])
    await message.answer('–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup=kb.add_user_data)
    await state.clear()


@router.callback_query(F.data == 'name')
async def edit_user(call: CallbackQuery, state: FSMContext):
    await state.set_state(Form.name_edit)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):")
    await call.answer()


@router.message(Form.name_edit)
async def edit_user_reg(message: Message, state: FSMContext):
    if not validate_name(message.text):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∏–º—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–º–∏–Ω. 2 —Å–∏–º–≤–æ–ª–∞).",
                                    reply_markup=kb.add_user_data)
    await state.update_data(name_edit=message.text.capitalize())
    data_state = await state.get_data()
    await db.update_name(data_state['name_edit'], data_state['edit_surname'], data_state['edit_name'])
    await message.answer('–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup=kb.add_user_data)
    await state.clear()


@router.callback_query(F.data == 'date')
async def edit_user(call: CallbackQuery, state: FSMContext):
    await state.set_state(Form.data_edit)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É\n–í —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await call.answer()


@router.message(Form.data_edit)
async def edit_user_reg(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text.replace(",", "."), "%d.%m.%Y").date()
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=kb.add_user_data)
    await state.update_data(data_edit=message.text)
    data_state = await state.get_data()
    await db.update_data(data_state['data_edit'], data_state['edit_surname'], data_state['edit_name'])
    await message.answer('–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup=kb.add_user_data)
    await state.clear()


@router.callback_query(F.data == 'cancel')
async def cancel(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–î–µ–∏ÃÜ—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.add_user_data)
    await state.clear()
    await call.answer()


@router.callback_query(F.data == 'cancel_note')
async def cancel(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–î–µ–∏ÃÜ—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.note_list)
    await state.clear()
    await call.answer()


@router.message(Form.first_name)
async def process_first_name(message: Message, state: FSMContext):
    if not validate_name(message.text):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–º–∏–Ω. 2 —Å–∏–º–≤–æ–ª–∞).",
                                    reply_markup=kb.add_user_data)

    await state.update_data(first_name=message.text.title())
    await state.set_state(Form.last_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):", reply_markup=kb.cancel_one)


@router.message(Form.last_name)
async def process_last_name(message: Message, state: FSMContext):
    if not validate_name(message.text):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–º–∏–Ω. 2 —Å–∏–º–≤–æ–ª–∞).",
                                    reply_markup=kb.add_user_data)

    await state.update_data(last_name=message.text.title())
    await state.set_state(Form.birthday)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=kb.cancel_one)


@router.message(Form.birthday)
async def add_user_reg(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text.replace(",", "."), "%d.%m.%Y").date()
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=kb.add_user_data)

    await state.update_data(birthday=message.text)
    data_state = await state.get_data()
    if not await db.db_check(data_state['last_name'], data_state['first_name']):
        await db.add_db(message.from_user.id, data_state['last_name'], data_state['first_name'], data_state['birthday'])
        await message.answer('–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã', reply_markup=kb.add_user_data)
    else:
        await message.answer('–¢–∞–∫–æ–∏ÃÜ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å', reply_markup=kb.add_user_data)
    await state.clear()


@router.message(F.text == '33')
async def file_open(message: Message):
    with open("DATA/33.txt", "r") as file:
        f = file.read()
        await message.answer(f"{f}")


@router.message(F.text == 'log')
async def file_open_logo(message: Message):
    with open("DATA/logs.log", "r") as file:
        f = file.read()[-3000:]
        await message.answer(f"{f}")
